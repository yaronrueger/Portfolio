import { type VariantProps } from "tailwind-variants";
import type { Classes } from "../theme/themeUtils";
import { dialog } from "../dialog/theme";
export type DrawerVariants = VariantProps<typeof drawer> & Classes<typeof drawer> & Classes<typeof dialog>;
export declare const drawer: import("tailwind-variants").TVReturnType<{
    placement: {
        left: {
            base: string;
        };
        right: {
            base: string;
        };
        top: {
            base: string;
        };
        bottom: {
            base: string;
        };
    };
    width: {
        default: {
            base: string;
        };
        full: {
            base: string;
        };
        half: {
            base: string;
        };
    };
    modal: {
        false: {
            base: string;
        };
        true: {
            base: string;
        };
    };
    shifted: {
        true: {};
        false: {};
    };
}, {
    base: string;
}, undefined, {}, {
    base: string;
    form: string;
    close: string;
}, import("tailwind-variants").TVReturnType<{}, {
    base: string;
    form: string;
    close: string;
}, undefined, {}, {
    base: string;
    form: string;
    close: string;
}, import("tailwind-variants").TVReturnType<{}, {
    base: string;
    form: string;
    close: string;
}, undefined, unknown, unknown, undefined>>>;
export type DrawerheadVariants = VariantProps<typeof drawerhead> & Classes<typeof drawerhead>;
export declare const drawerhead: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            button?: import("tailwind-merge").ClassNameValue;
            base?: import("tailwind-merge").ClassNameValue;
            svg?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            button?: import("tailwind-merge").ClassNameValue;
            base?: import("tailwind-merge").ClassNameValue;
            svg?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    button: string;
    svg: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            button?: import("tailwind-merge").ClassNameValue;
            base?: import("tailwind-merge").ClassNameValue;
            svg?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    button: string;
    svg: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    button: string;
    svg: string;
}, undefined, unknown, unknown, undefined>>;
export type DrawerHandleVariants = VariantProps<typeof drawerhandle> & Classes<typeof drawerhandle>;
export declare const drawerhandle: import("tailwind-variants").TVReturnType<{
    placement: {
        left: {
            base: string;
            handle: string;
        };
        right: {
            base: string;
            handle: string;
        };
        top: {
            base: string;
            handle: string;
        };
        bottom: {
            base: string;
            handle: string;
        };
    };
}, {
    base: string;
    handle: string;
}, undefined, {
    placement: {
        left: {
            base: string;
            handle: string;
        };
        right: {
            base: string;
            handle: string;
        };
        top: {
            base: string;
            handle: string;
        };
        bottom: {
            base: string;
            handle: string;
        };
    };
}, {
    base: string;
    handle: string;
}, import("tailwind-variants").TVReturnType<{
    placement: {
        left: {
            base: string;
            handle: string;
        };
        right: {
            base: string;
            handle: string;
        };
        top: {
            base: string;
            handle: string;
        };
        bottom: {
            base: string;
            handle: string;
        };
    };
}, {
    base: string;
    handle: string;
}, undefined, unknown, unknown, undefined>>;
