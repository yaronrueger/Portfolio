import type { Classes } from "../theme/themeUtils";
import { type VariantProps } from "tailwind-variants";
export type AndroidVariants = VariantProps<typeof android> & Classes<typeof android>;
declare const android: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftMid?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftMid?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftMid: string;
    leftBot: string;
    right: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftMid?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftMid: string;
    leftBot: string;
    right: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftMid: string;
    leftBot: string;
    right: string;
}, undefined, unknown, unknown, undefined>>;
export type DefaultMockupVariants = VariantProps<typeof defaultMockup> & Classes<typeof defaultMockup>;
declare const defaultMockup: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftBot: string;
    right: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftBot: string;
    right: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftBot: string;
    right: string;
}, undefined, unknown, unknown, undefined>>;
export type DesktopVariants = VariantProps<typeof desktop> & Classes<typeof desktop>;
declare const desktop: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            inner?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            botUnder?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            inner?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            botUnder?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    inner: string;
    bot: string;
    botUnder: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            inner?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            botUnder?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    inner: string;
    bot: string;
    botUnder: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    inner: string;
    bot: string;
    botUnder: string;
}, undefined, unknown, unknown, undefined>>;
export type IosVariants = VariantProps<typeof ios> & Classes<typeof ios>;
declare const ios: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftBot: string;
    right: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftBot: string;
    right: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    slot: string;
    top: string;
    leftTop: string;
    leftBot: string;
    right: string;
}, undefined, unknown, unknown, undefined>>;
export type LaptopVariants = VariantProps<typeof laptop> & Classes<typeof laptop>;
declare const laptop: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            inner?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            botCen?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            inner?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            botCen?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    inner: string;
    bot: string;
    botCen: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            inner?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            botCen?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    inner: string;
    bot: string;
    botCen: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    inner: string;
    bot: string;
    botCen: string;
}, undefined, unknown, unknown, undefined>>;
export type SmartwatchVariants = VariantProps<typeof smartwatch> & Classes<typeof smartwatch>;
declare const smartwatch: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            rightTop?: import("tailwind-merge").ClassNameValue;
            rightBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            rightTop?: import("tailwind-merge").ClassNameValue;
            rightBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    rightTop: string;
    rightBot: string;
    top: string;
    bot: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            top?: import("tailwind-merge").ClassNameValue;
            bot?: import("tailwind-merge").ClassNameValue;
            rightTop?: import("tailwind-merge").ClassNameValue;
            rightBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    rightTop: string;
    rightBot: string;
    top: string;
    bot: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    slot: string;
    rightTop: string;
    rightBot: string;
    top: string;
    bot: string;
}, undefined, unknown, unknown, undefined>>;
export type TabletVariants = VariantProps<typeof tablet> & Classes<typeof tablet>;
declare const tablet: import("tailwind-variants").TVReturnType<{
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftMid?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {
    [x: string]: {
        [x: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftMid?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    leftTop: string;
    leftMid: string;
    leftBot: string;
    right: string;
}, undefined, {
    [key: string]: {
        [key: string]: import("tailwind-merge").ClassNameValue | {
            base?: import("tailwind-merge").ClassNameValue;
            slot?: import("tailwind-merge").ClassNameValue;
            right?: import("tailwind-merge").ClassNameValue;
            leftTop?: import("tailwind-merge").ClassNameValue;
            leftMid?: import("tailwind-merge").ClassNameValue;
            leftBot?: import("tailwind-merge").ClassNameValue;
        };
    };
} | {}, {
    base: string;
    slot: string;
    leftTop: string;
    leftMid: string;
    leftBot: string;
    right: string;
}, import("tailwind-variants").TVReturnType<unknown, {
    base: string;
    slot: string;
    leftTop: string;
    leftMid: string;
    leftBot: string;
    right: string;
}, undefined, unknown, unknown, undefined>>;
export { android, defaultMockup, desktop, ios, laptop, smartwatch, tablet };
